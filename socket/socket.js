const { Server } = require("socket.io");
const socketConfig = require("../src/config/socket");

let io;
let heartbeatInterval;

function initializeSocket(server) {
    // ‚úÖ S·ª≠ d·ª•ng config t·ª´ file ri√™ng
    const config = { ...socketConfig };
    delete config.heartbeatInterval; // Remove custom properties
    delete config.enableLogging;
    delete config.maxRoomsPerSocket;
    delete config.rateLimit;
    
    io = new Server(server, config);

    io.on("connection", (socket) => {
        console.log(`üîó Client k·∫øt n·ªëi: ${socket.id} | Transport: ${socket.conn.transport.name}`);
        
        // ‚úÖ L∆∞u th√¥ng tin client ƒë·ªÉ debug - Th√™m th√¥ng tin cho thi·∫øt b·ªã th·∫≠t
        socket.clientInfo = {
            connectedAt: new Date(),
            transport: socket.conn.transport.name,
            userAgent: socket.handshake.headers['user-agent'],
            clientIP: socket.handshake.address,
            origin: socket.handshake.headers.origin,
            referer: socket.handshake.headers.referer
        };
        
        // ‚úÖ Log chi ti·∫øt cho debug thi·∫øt b·ªã th·∫≠t
        console.log(`üì± Client Details:`, {
            id: socket.id,
            transport: socket.conn.transport.name,
            ip: socket.handshake.address,
            userAgent: socket.handshake.headers['user-agent'],
            origin: socket.handshake.headers.origin
        });

        // ‚úÖ X·ª≠ l√Ω transport upgrade
        socket.conn.on('upgrade', () => {
            console.log(`üîÑ ${socket.id} upgraded to ${socket.conn.transport.name}`);
        });

        // ‚úÖ Nh·∫≠n userId t·ª´ ph√≠a client v√† join v√†o room
        socket.on("joinRoom", (userId) => {
            socket.userId = userId;
            socket.join(userId); // User room
            console.log(`üë§ User ${userId} joined personal room | Socket: ${socket.id}`);
        });

        // ‚úÖ Join group room ƒë·ªÉ nh·∫≠n location updates
        socket.on("joinGroup", (groupId) => {
            if (!groupId) return;
            socket.join(`group_${groupId}`);
            console.log(`üë• Socket ${socket.id} joined group_${groupId}`);
        });

        // ‚úÖ Leave group room
        socket.on("leaveGroup", (groupId) => {
            if (!groupId) return;
            socket.leave(`group_${groupId}`);
            console.log(`üë• Socket ${socket.id} left group_${groupId}`);
        });

        // ‚úÖ Heartbeat cho mobile - client g·ª≠i ping
        socket.on("ping", (callback) => {
            if (typeof callback === 'function') {
                callback('pong');
            }
        });

        // ‚úÖ Enhanced error handling - Th√™m logs chi ti·∫øt cho mobile
        socket.on("connect_error", (error) => {
            console.error(`‚ùå Socket connection error [${socket.id}]:`, {
                message: error.message,
                type: error.type,
                description: error.description,
                context: error.context,
                clientInfo: socket.clientInfo
            });
        });

        socket.on("error", (error) => {
            console.error(`‚ùå Socket error [${socket.id}]:`, {
                message: error.message,
                stack: error.stack,
                clientInfo: socket.clientInfo
            });
        });
        
        // ‚úÖ Th√™m handler cho mobile network issues
        socket.on("reconnect_attempt", (attemptNumber) => {
            console.log(`üîÑ Socket ${socket.id} attempting reconnect #${attemptNumber}`);
        });
        
        socket.on("reconnect", (attemptNumber) => {
            console.log(`‚úÖ Socket ${socket.id} reconnected after ${attemptNumber} attempts`);
        });
        
        socket.on("reconnect_error", (error) => {
            console.error(`‚ùå Socket ${socket.id} reconnect error:`, error.message);
        });
        
        socket.on("reconnect_failed", () => {
            console.error(`‚ùå Socket ${socket.id} failed to reconnect`);
        });

        socket.on("disconnect", (reason) => {
            const duration = socket.clientInfo ? 
                Math.round((Date.now() - socket.clientInfo.connectedAt.getTime()) / 1000) : 0;
            console.log(`üîå Client disconnected: ${socket.id} | Reason: ${reason} | Duration: ${duration}s`);
        });

        // ‚úÖ Test connection - ƒë·ªÉ client ki·ªÉm tra k·∫øt n·ªëi
        socket.on("testConnection", (data, callback) => {
            if (typeof callback === 'function') {
                callback({
                    status: 'ok',
                    socketId: socket.id,
                    timestamp: Date.now(),
                    received: data
                });
            }
        });
    });

    // ‚úÖ Enhanced global connection error handling cho thi·∫øt b·ªã th·∫≠t
    io.engine.on("connection_error", (err) => {
        console.error("üö® Global Socket Connection Error:", {
            message: err.message,
            code: err.code,
            type: err.type,
            req: {
                url: err.req?.url,
                headers: {
                    userAgent: err.req?.headers?.['user-agent'],
                    origin: err.req?.headers?.origin,
                    referer: err.req?.headers?.referer
                },
                method: err.req?.method,
                ip: err.req?.connection?.remoteAddress
            },
            context: err.context,
            description: err.description
        });
    });
    
    // ‚úÖ Th√™m middleware ƒë·ªÉ log t·∫•t c·∫£ connections attempts
    io.use((socket, next) => {
        console.log(`üîç Connection attempt from:`, {
            id: socket.id,
            ip: socket.handshake.address,
            userAgent: socket.handshake.headers['user-agent'],
            origin: socket.handshake.headers.origin,
            transport: socket.conn.transport.name,
            timestamp: new Date().toISOString()
        });
        next();
    });

    // B·∫Øt ƒë·∫ßu g·ª≠i tin nh·∫Øn ƒë·ªãnh k·ª≥ sau khi socket ƒë∆∞·ª£c kh·ªüi t·∫°o
    startPeriodicMessage();

    return io;
}

function getSocketIO() {
    if (!io) {
        throw new Error("Socket.IO ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
    }
    return io;
}

// ‚úÖ Heartbeat system t·ªëi ∆∞u cho mobile
function startPeriodicMessage() {
    // X√≥a interval c≈© n·∫øu c√≥
    if (heartbeatInterval) {
        clearInterval(heartbeatInterval);
    }

    // T·∫°o interval m·ªõi - gi·∫£m xu·ªëng 2 ph√∫t cho mobile
    heartbeatInterval = setInterval(() => {
        if (!io) return;

        const connectedClients = io.engine.clientsCount;
        if (connectedClients === 0) return; // Kh√¥ng g·ª≠i n·∫øu kh√¥ng c√≥ client

        const currentTime = new Date().toLocaleString();
        const heartbeat = {
            type: 'heartbeat',
            serverTime: currentTime,
            timestamp: Date.now(),
            connectedClients: connectedClients
        };

        // Ch·ªâ g·ª≠i heartbeat, kh√¥ng g·ª≠i message kh√¥ng c·∫ßn thi·∫øt
        io.emit('serverHeartbeat', heartbeat);
        if (socketConfig.enableLogging) {
            console.log(`üíì Server heartbeat sent to ${connectedClients} clients - ${currentTime}`);
        }
    }, socketConfig.heartbeatInterval);
}

// ‚úÖ Th√™m c√°c utility functions
function getConnectionStats() {
    if (!io) return null;
    
    return {
        totalConnections: io.engine.clientsCount,
        connectedSockets: Array.from(io.sockets.sockets.keys()),
        rooms: Array.from(io.sockets.adapter.rooms.keys()),
        timestamp: Date.now()
    };
}

// ‚úÖ Broadcast to specific room v·ªõi error handling
function broadcastToRoom(roomId, event, data) {
    if (!io) {
        console.error('‚ùå Socket.IO not initialized');
        return false;
    }
    
    try {
        io.to(roomId).emit(event, data);
        console.log(`üì° Broadcasted '${event}' to room '${roomId}'`);
        return true;
    } catch (error) {
        console.error(`‚ùå Error broadcasting to room ${roomId}:`, error.message);
        return false;
    }
}

// ‚úÖ Cleanup function khi server shutdown
function cleanup() {
    if (heartbeatInterval) {
        clearInterval(heartbeatInterval);
        heartbeatInterval = null;
    }
    
    if (io) {
        io.close();
        console.log('üîå Socket.IO server closed');
    }
}

// ‚úÖ Graceful shutdown handling
process.on('SIGTERM', cleanup);
process.on('SIGINT', cleanup);

module.exports = { 
    initializeSocket, 
    getSocketIO, 
    getConnectionStats, 
    broadcastToRoom, 
    cleanup 
};